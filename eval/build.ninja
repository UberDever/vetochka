ninja_required_version = 1.10

cc = clang
cflags = -fPIC --std=c99 -Wall -Wextra -I.
extraflags = -g -fsanitize=address,undefined,leak -fno-omit-frame-pointer -O0

# Define the build directory
builddir = ../build

# Define the build rules
rule compile
  command = $cc $cflags $extraflags -c $in -o $out
  description = Compiling $in

rule link_lib
  command = $cc -fPIC -shared $extraflags $in -o $out
  description = Linking $out

rule link_exe
  command = $cc $in $extraflags -L. -L$builddir -l$lib_name -Wl,-rpath,$builddir -Wl,-rpath,. -o $out
  description = Linking executable $out

rule run_test
  command = $builddir/test_runner
  description = Running tests

# Objects
build $builddir/eval-release.o: compile eval.c
    extraflags =
build $builddir/node-release.o: compile node.c
    extraflags =
build $builddir/memory-release.o: compile memory.c
    extraflags =
build $builddir/encode-release.o: compile encode.c
    extraflags =

build $builddir/eval-sanitize.o: compile eval.c
build $builddir/node-sanitize.o: compile node.c
build $builddir/memory-sanitize.o: compile memory.c
build $builddir/encode-sanitize.o: compile encode.c

# Libs
build $builddir/libeval-release.so: link_lib $builddir/eval-release.o $builddir/node-release.o $builddir/memory-release.o $builddir/encode-release.o
    extraflags =
build $builddir/libeval-sanitize.so: link_lib $builddir/eval-sanitize.o $builddir/node-sanitize.o $builddir/memory-sanitize.o $builddir/encode-sanitize.o

# Testing
build $builddir/test_eval.o: compile test_eval.c
build $builddir/test_runner: link_exe $builddir/test_eval.o $builddir/libeval-sanitize.so
    lib_name = eval-sanitize

build test: run_test | $builddir/test_runner

build lib: phony $builddir/libeval-release.so

# Default target
default lib
